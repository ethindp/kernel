[config]
skip_core_tasks = true
reduce_output = true

[tasks.default]
run_task = { name = ["check_pciids", "format", "build", "run"] }

[tasks.check_pciids]
script_runner = "@rust"
script='''
//!```cargo
//![dependencies]
//!compression={version = "*", features=["gzip"]}
//!sha2="*"
//!curl="*"
//!```
use curl::easy::Easy;
use compression::prelude::*;
use sha2::{Sha256, Digest};
use std::fs::{read, write};
use std::path::Path;

fn main() {
    println!("Checking for PCI ID repository");
    let mut bytes = Vec::new();
    let path = format!("{}/libk/pci.ids.gz", env!("CARGO_MAKE_WORKING_DIRECTORY"));
    let path = path.as_str();
    if Path::new(path.clone()).exists() {
        println!("Found existing PCI IDs repository");
        let current_repo = read(path).expect("Cannot open existing PCI IDs repository").iter().cloned().decode(&mut GZipDecoder::new()).collect::<Result<Vec<_>, _>>().expect("Cannot decompress existing PCI IDs repository");
        println!("Existing PCI IDs repository is {} bytes", current_repo.len());
        println!("Checking for PCI ID repository updates");
        let mut easy = Easy::new();
        easy.url("https://pci-ids.ucw.cz/v2.2/pci.ids.gz").expect("Cannot set URL of curl easy instance");
        {
            let mut transfer = easy.transfer();
            transfer.write_function(|data| {
                    bytes.extend_from_slice(data);
                    Ok(data.len())
                }).expect("Cannot set write function for download");
            transfer.perform().expect("Cannot download PCI IDs repository");
        }
        let new_bytes = bytes.iter().cloned().decode(&mut GZipDecoder::new()).collect::<Result<Vec<_>, _>>().expect("Cannot decompress new repository bytes");
        println!("Latest PCI IDs repository is {} bytes", new_bytes.len());
        let mut hasher1 = Sha256::new();
        let mut hasher2 = Sha256::new();
        hasher1.update(new_bytes);
        hasher2.update(current_repo);
        let new_hash = hasher1.finalize();
        let current_hash = hasher2.finalize();
        if current_hash != new_hash {
            println!("PCI IDs repository updated, dumping ({} bytes)", bytes.len());
            write(path.clone(), bytes.clone()).expect("Cannot dump new PCI IDs repository");
        } else {
            println!("PCI IDs repository is up to date");
        }
    } else {
        println!("Downloading latest PCI IDs repository because it does not already exist");
        let mut easy = Easy::new();
        easy.url("https://pci-ids.ucw.cz/v2.2/pci.ids.gz").expect("Cannot set URL of curl easy instance");
        {
            let mut transfer = easy.transfer();
            transfer.write_function(|data| {
                    bytes.extend_from_slice(data);
                    Ok(data.len())
                }).expect("Cannot set write function for download");
            transfer.perform().expect("Cannot download PCI IDs repository");
        }
        write(path.clone(), bytes.clone()).expect("Cannot dump new PCI IDs repository");
        println!("Downloaded latest repository ({}bytes)", bytes.len());
    }
}
'''

[tasks.format]
command = "cargo"
args = ["fmt", "--all"]

[tasks.build]
run_task = { name = ["check_kernel", "clippy_kernel", "build_kernel", "build_bootloader"] }
dependencies = ["format"]

[tasks.build_kernel]
command = "cargo"
args = [
    "build",
    "-Zbuild-std=core,compiler_builtins,alloc",
    "-Zbuild-std-features=compiler-builtins-mem",
    "--target",
    "x86_64-unknown-none"
]

[tasks.build_bootloader]
script_runner = "@rust"
script = '''
//!```cargo
//![dependencies]
//!bootloader-locator = "*"
//!```
use std::process::Command;
use std::env::var;
use bootloader_locator::locate_bootloader;

fn main() {
    let mut bootloader_location = locate_bootloader("bootloader").expect("Could not find bootloader");
    bootloader_location.pop();
    let bootloader_location = bootloader_location.into_os_string();
    let bootloader_location = bootloader_location.to_str().unwrap();
    let cwd = var("CARGO_MAKE_WORKING_DIRECTORY").expect("CARGO_MAKE_WORKING_DIRECTORY not set");
    let mut builder_command = Command::new("cargo");
    builder_command.current_dir(bootloader_location);
    builder_command.args(&["builder", "--kernel-manifest", &(cwd.clone() + "/Cargo.toml"), "--kernel-binary", &(cwd.clone() + "/target/x86_64-unknown-none/debug/kernel"), "--target-dir", &(cwd.clone() + "/target"), "--out-dir", &(cwd.clone() + "/target/x86_64-unknown-none/debug")]);
    builder_command.status().expect("Failed to run cargo builder");
}
'''

[tasks.run]
command = "qemu-system-x86_64"
args = ["-enable-kvm", "-machine", "q35,smm=off,vmport=off", "-cpu", "host,kvm=on", "-m", "8G", "-device", "virtio-balloon", "-nographic", "-device", "qemu-xhci,id=input", "-device", "usb-kbd,bus=input.0", "-device", "usb-tablet,bus=input.0", "-audiodev", "pa,id=audio0,out.mixing-engine=off,out.stream-name=kernel,in.stream-name=kernel", "-device", "intel-hda", "-device", "hda-duplex,audiodev=audio0", "-rtc", "base=localtime,clock=host,driftfix=slew", "-drive", "format=raw,file=${CARGO_MAKE_WORKING_DIRECTORY}/target/x86_64-unknown-none/debug/boot-uefi-kernel.img", "-drive", "if=pflash,format=raw,file=/usr/share/OVMF/x64/OVMF_CODE.fd,readonly=on", "-drive", "file=disk-nvme.qcow2,if=none,id=NVME01", "-device", "nvme,drive=NVME01,serial=0001", "-drive", "id=disk,file=disk-sata.qcow2,if=none", "-device", "ahci,id=ahci", "-device", "ide-hd,drive=disk,bus=ahci.0",  "-debugcon", "file:qemu.log", "-global", "isa-debugcon.iobase=0x402", "-d", "int", "-D", "qemu2.log", "-device", "qemu-xhci,id=audio", "-device", "usb-audio,audiodev=usbaudio,bus=audio.0", "-audiodev", "pa,id=usbaudio,out.mixing-engine=off,out.stream-name=kernel-alsa,in.stream-name=kernel-alsa", "-device", "virtio-net,netdev=nic", "-netdev", "user,hostname=kernel,id=nic",  "-device", "virtio-rng-pci,rng=rng0", "-object", "rng-random,id=rng0,filename=/dev/urandom", "-device", "virtio-gpu", "-global", "driver=cfi.pflash01,property=secure,value=on", "-no-reboot"]
dependencies=["build"]

[tasks.run_gdb]
command = "qemu-system-x86_64"
args = ["-machine", "q35,smm=off,vmport=off", "-cpu", "max,kvm=off", "-m", "8G", "-device", "virtio-balloon", "-nographic", "-device", "qemu-xhci,id=input", "-device", "usb-kbd,bus=input.0", "-device", "usb-tablet,bus=input.0", "-audiodev", "pa,id=audio0,out.mixing-engine=off,out.stream-name=kernel,in.stream-name=kernel", "-device", "intel-hda", "-device", "hda-duplex,audiodev=audio0", "-rtc", "base=localtime,clock=host,driftfix=slew", "-drive", "format=raw,file=${CARGO_MAKE_WORKING_DIRECTORY}/target/x86_64-unknown-none/debug/boot-uefi-kernel.img", "-drive", "if=pflash,format=raw,file=/usr/share/OVMF/x64/OVMF_CODE.fd,readonly=on", "-drive", "file=disk-nvme.qcow2,if=none,id=NVME01", "-device", "nvme,drive=NVME01,serial=0001", "-drive", "id=disk,file=disk-sata.qcow2,if=none", "-device", "ahci,id=ahci", "-device", "ide-hd,drive=disk,bus=ahci.0",  "-debugcon", "file:qemu.log", "-global", "isa-debugcon.iobase=0x402", "-d", "int", "-D", "qemu2.log", "-device", "qemu-xhci,id=audio", "-device", "usb-audio,audiodev=usbaudio,bus=audio.0", "-audiodev", "pa,id=usbaudio,out.mixing-engine=off,out.stream-name=kernel-alsa,in.stream-name=kernel-alsa", "-device", "virtio-net,netdev=nic", "-netdev", "user,hostname=kernel,id=nic",  "-device", "virtio-rng-pci,rng=rng0", "-object", "rng-random,id=rng0,filename=/dev/urandom", "-device", "virtio-gpu", "-global", "driver=cfi.pflash01,property=secure,value=on", "-no-reboot", "-no-shutdown", "-s", "-S"]
dependencies=["build"]

[tasks.run_debug]
command = "qemu-system-x86_64"
args = ["-machine", "q35,smm=off,vmport=off", "-cpu", "max,kvm=off", "-m", "8G", "-device", "virtio-balloon", "-nographic", "-device", "qemu-xhci,id=input", "-device", "usb-kbd,bus=input.0", "-device", "usb-tablet,bus=input.0", "-audiodev", "pa,id=audio0,out.mixing-engine=off,out.stream-name=kernel,in.stream-name=kernel", "-device", "intel-hda", "-device", "hda-duplex,audiodev=audio0", "-rtc", "base=localtime,clock=host,driftfix=slew", "-drive", "format=raw,file=${CARGO_MAKE_WORKING_DIRECTORY}/target/x86_64-unknown-none/debug/boot-uefi-kernel.img", "-drive", "if=pflash,format=raw,file=/usr/share/OVMF/x64/OVMF_CODE.fd,readonly=on", "-drive", "file=disk-nvme.qcow2,if=none,id=NVME01", "-device", "nvme,drive=NVME01,serial=0001", "-drive", "id=disk,file=disk-sata.qcow2,if=none", "-device", "ahci,id=ahci", "-device", "ide-hd,drive=disk,bus=ahci.0",  "-debugcon", "file:qemu.log", "-global", "isa-debugcon.iobase=0x402", "-d", "int", "-D", "qemu2.log", "-device", "qemu-xhci,id=audio", "-device", "usb-audio,audiodev=usbaudio,bus=audio.0", "-audiodev", "pa,id=usbaudio,out.mixing-engine=off,out.stream-name=kernel-alsa,in.stream-name=kernel-alsa", "-device", "virtio-net,netdev=nic", "-netdev", "user,hostname=kernel,id=nic",  "-device", "virtio-rng-pci,rng=rng0", "-object", "rng-random,id=rng0,filename=/dev/urandom", "-device", "virtio-gpu", "-global", "driver=cfi.pflash01,property=secure,value=on", "-no-reboot", "-no-shutdown", "-s"]
dependencies=["build"]

[tasks.check_kernel]
command = "cargo"
args = ["check", "-Zbuild-std=core,compiler_builtins,alloc", "-Zbuild-std-features=compiler-builtins-mem", "--target", "x86_64-unknown-none"]

[tasks.clippy_kernel]
command = "cargo"
args = ["clippy", "-Zbuild-std=core,compiler_builtins,alloc", "-Zbuild-std-features=compiler-builtins-mem", "--target", "x86_64-unknown-none"]


